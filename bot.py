        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é!")
        return
        
    msg = bot.send_message(call.message.chat.id, 
                          "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –õ–Æ–ë–û–ô —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n"
                          "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
                          reply_markup=get_cancel_markup(user_id))
    bot.register_next_step_handler(msg, process_upload)

def process_upload(message):
    if message.text and message.text == '/cancel':
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
        
    user_id = message.from_user.id
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –õ–Æ–ë–û–ô —Ñ–∞–π–ª - –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ
    file_id = None
    file_name = "unknown"
    
    if message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_name = f"photo_{file_id}.jpg"
    elif message.video:
        file_id = message.video.file_id
        file_name = message.video.file_name or f"video_{file_id}.mp4"
    elif message.audio:
        file_id = message.audio.file_id
        file_name = message.audio.file_name or f"audio_{file_id}.mp3"
    elif message.voice:
        file_id = message.voice.file_id
        file_name = f"voice_{file_id}.ogg"
    else:
        bot.send_message(message.chat.id, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ)")
        return
    
    try:
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_size = len(downloaded_file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        user_folder = f"user_files/{user_id}"
        os.makedirs(user_folder, exist_ok=True)
        
        file_path = f"{user_folder}/{file_name}"
        
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        cursor.execute('''INSERT INTO files (user_id, filename, file_path, file_size)
                       VALUES (?, ?, ?, ?)''', (user_id, file_name, file_path, file_size))
        update_user_storage(user_id, file_size)
        conn.commit()
        
        bot.send_message(message.chat.id, f"‚úÖ –§–∞–π–ª {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω! ({file_size/1024:.1f} KB)")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('list_'))
def list_files(call):
    try:
        data = call.data.split('_')
        user_id = int(data[1])
        page = int(data[2]) if len(data) > 2 else 0  # –§–ò–ö–°: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞
        
        if call.from_user.id != user_id:
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é!")
            return
            
        files, total = get_user_files(user_id, page)
        
        if not files:
            bot.edit_message_text("üìÅ –£ –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤", 
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=get_back_markup(user_id))
            return
        
        file_list = "\n".join([f"üìÑ {name} ({size/1024:.1f} KB)" for name, size in files])
        
        text = f"üìÅ –í–∞—à–∏ —Ñ–∞–π–ª—ã (—Å—Ç—Ä. {page+1}):\n\n{file_list}\n\n–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total}"
        
        markup = types.InlineKeyboardMarkup()
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        for filename, size in files:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
            display_name = filename[:30] + "..." if len(filename) > 30 else filename
            callback_data = f"get_{user_id}_{filename.replace(' ', '_')}"  # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã
            markup.add(types.InlineKeyboardButton(f"üì• {display_name}", callback_data=callback_data))
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_{user_id}_{page-1}"))
        
        if (page + 1) * 5 < total:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"list_{user_id}_{page+1}"))
        
        if nav_buttons:
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_{user_id}"))
        
        bot.edit_message_text(text,
                             call.message.chat.id,
                             call.message.message_id,
                             reply_markup=markup)
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('download_'))
def download_menu(call):
    user_id = int(call.data.split('_')[1])
    
    if call.from_user.id != user_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é!")
        return
        
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    call.data = f"list_{user_id}_0"
    list_files(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('get_'))
def download_file(call):
    try:
        data = call.data.split('_')
        user_id = int(data[1])
        filename = '_'.join(data[2:]).replace('_', ' ')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –æ–±—Ä–∞—Ç–Ω–æ
        
        if call.from_user.id != user_id:
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é!")
            return
            
        file_path = f"user_files/{user_id}/{filename}"
        
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if file_size > 50 * 1024 * 1024:  # 50MB –ª–∏–º–∏—Ç
                bot.answer_callback_query(call.id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50MB)")
                return
                
            with open(file_path, 'rb') as file:
                bot.send_document(call.message.chat.id, file, visible_file_name=filename)
            bot.answer_callback_query(call.id, "‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            bot.answer_callback_query(call.id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('profile_'))
def show_profile(call):
    user_id = int(call.data.split('_')[1])
    
    if call.from_user.id != user_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é!")
        return
        
    cursor.execute("SELECT username, storage_used FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()
    
    cursor.execute("SELECT COUNT(*) FROM files WHERE user_id=?", (user_id,))
    file_count = cursor.fetchone()[0]
    
    if user_data:
        username, storage_used = user_data
        profile_text = (f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n"
                       f"üÜî ID: {user_id}\n"
                       f"üìõ Username: @{username}\n"
                       f"üìÅ –§–∞–π–ª–æ–≤: {file_count}\n"
                       f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {storage_used/1024/1024:.2f} MB")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_{user_id}"))
        
        bot.edit_message_text(profile_text,
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=markup)

def get_back_markup(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_{user_id}"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_'))
def back_to_main(call):
    user_id = int(call.data.split('_')[1])
    
    if call.from_user.id != user_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é!")
        return
        
    show_main_menu(call.message.chat.id, user_id)
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_'))
def cancel_action(call):
    user_id = int(call.data.split('_')[1])
    
    if call.from_user.id != user_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é!")
        return
        
    bot.send_message(call.message.chat.id, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    show_main_menu(call.message.chat.id, user_id)

@bot.message_handler(commands=['cancel'])
def cancel_command(message):
    bot.send_message(message.chat.id, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    show_main_menu(message.chat.id, message.from_user.id)

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling(none_stop=True)
